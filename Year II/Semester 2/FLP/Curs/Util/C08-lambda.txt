true ::= λ t f . t
false ::= λ t f . f
if ::= λ c then else . c then else

(\x.t) e --beta--> [e/x]t


if false (λ x . x x ) (λ x . x )
::=
(((λ c.λ then.λ else . c then else) false) (λ x . x x )) (λ x . x )
--beta-->
((λ then.λ else . false then else) (λ x . x x )) (λ x . x )
--beta-->
(λ else . false (λ x . x x)  else ) (λ x . x )
--beta-->
false (λ x . x x) (λ x . x )
::=
((λ t.λ f . f) (λ x . x x)) (λ x . x )
--beta-->
(λ f . f) (λ x . x )
--beta-->
(λ x . x )

and false _ = false
and true b  = true

and = \x.\y. if x y false === \x y. x y false ===  \x y. x y x

and true false
::=
(\x y. x y false) true false
--beta x 2-->
true false false
::=
(λ t f . t) false false
--beta x 2-->
false

or  ::= \x y . if x x y  === \x y . x x y  === \x y . x true y

not ::= \x . if x false true === \x . x false true === \x.\t f.x f t

not true
::=
(\x.\t f.x f t) true
--beta-->
\t f.true f t
::=
\t f.(λ t' f' . t') f t
--beta x 2-->
\t f.f  === false


z :: t
s :: t -> t



0 ::= \s z. z
1 ::= \s z. s z
2 ::= \s z. s (s z)

4 ::= \s z. s (s (s (s z)))


n ::= \s z. s^n z


n === \s z. n s z

S ::= \n. \s z. s (n s z) === \n. \s z. n s (s z)

S 1
::=
(\n. \s z. n s (s z)) 1
--beta-->
\s z. 1 s (s z)
::=
\s z. (\s' z'. s' z') s (s z)
--beta x 2-->
\s z. s (s z) === 2


S' ::= \n.n S 1


n s ::= \z. s^n z
m s ::= \z. s^m z

\s z. n s (m s z) ::= \s z. s^(m + n) z = m + n


+ ::= \m n. m S n === \m n . n S m 
   === \m n.\s z. n s (m s z) === \m n.\s z. m s (n s z) 

* ::= \m n. m (+ n) 0  (adun de m ori n la 0)
      === \m n.\s. m (n s)

^ m n ::= n (* m) 1   (inmulțesc de n ori pe m la 1)
      === \m n.n m

^ 2 3
::=
(\m n.n m) 3 2
--beta x 2-->
3 2
::=
(\s z. s (s (s z))) 2
--beta-->
(\z. 2 (2 (2 z)))
::=
(\z. 2 (2 ((\s' z'. s' (s' z')) z)))
--beta-->
(\z. 2 (2 (\z'. z (z z'))))


(0,0)
(0,1)
(1,2)
..
(n-1, n)







s : t -> t
z : t

3   ::=    \ (s :: t -> t) (z :: t) . s (s (s z))

(+ 5 7)  = (\m n. \s z. m s (n s z)) 5 7
       2x-> \s z. 5 s (7 s z)
         ::= \s z. 5 s ((\s z. s (s (s (s (s (s (s z))))))) s z)


(?0=) 0  ::=   (λ n . n (λ x . false ) true) (\ s z. z)
            -> (\ s z. z) (λ x . false ) true
          2x-> true

(?0=) 2  ::=   (λ n . n (λ x . false ) true) (\ s z. s (s z))
            -> (\ s z. s (s z)) (λ x . false ) true
          2x-> (λ x . false ) ((λ x . false ) true)
            -> false


(3,5)  ::=  \ f. f 3 4

pair   ::=  \a b.\f. f a b

fst    ::= \p. p (\a b. a)

snd    ::= \p. p (\a b. b)


omega   =  (\x. x x) (\x. x x) -> omega

x / y = 0                if x < y
x / y = 1 + (x - y) / y  if y <> 0 /\ x >= y

((5 / 0) + 7) * 5

S'' = \p -> (\x -> (x, x + 1)) (snd p)









4  ::=    \s z. s (s (s (s z)))

4 - 1 = 3  ::=  \s z. s (s (s z))




S'   care se comporta ca S pentru orice număr
     care dă 0 când e aplicat lui Z'




S1 ::=  \n. \s z. s (n s z)

Vreau Z' a.i.   S1 Z' = 0
  (\n. \s z. s (n s z)) Z'  = \s z. s (Z' s z)
                          0 = \s z. z
nu merge

S2 ::=  \n. \s z. n s (s z)

Vreau Z' a.i.   S2 Z' = 0
S2 Z'  =  (\n. \s z. n s (s z)) Z' = \s z. Z' s (s z)
                                 0 = \s z. z
nu merge


S' ::=  \n. n S 1

Vreau Z' a.i.  S' Z' = 0
S' Z'  = (\n. n S 1) Z' = Z' S 1 = 0

iau Z' = \s z. 0
                      


P' ::= λ n . n S' Z'

P' 2  =  2 S' Z' = S' (S' Z') = S' 0 = 1
P' 0 = 0 S' Z' = Z'   - ar fi problematic


P ::= \n. 0?= n 0 (n (\n. n S 1) (\s z. 0))





[1, 3, 4] ::=  \a i. a 1 (a 3 (a 4 i))
tail [1,3,4] ==  \a i. a 3 (a 4 i)

 [] ::= \a i. i
(:) ::= \x xs. \a i. a x (xs a i)

(++) ::= \xs ys. xs (:) ys
length ::= \xs. xs (\x n. S n) 0

null? ::= \xs. xs (\x b.false) true

head ::= \ximplicit xs . xs (\x b. x) ximplicit

tail ::= λxs . fst (xs (λx p .(pair (snd p) ((:) x (snd p)))) (pair null null))



foldr ::= \a i l. l a i
map   ::= \f l. l (\x l'. (:) (f x) l') []
filter ::= \p l. l (\x l'. p x ((:) x l') l') []


5!
(1,1)      0!
(2,1)      1!
(3,1*2)    2!
(4,1*2*3)  3!
...


F(5)
(0,1)      F(0)
(1,1)      F(1)
(1,2)      F(2)
(2,3)
(3,5)
(5,8)
...



5 : 2
(0,5)
(1,3)
(2,1)
(2,1)
(2,1)
(2,1)

3 : 1
(0,3)
(1,2)
(2,1)
(3,0)

3 : 0
(0,3)
(1,3)
(2,3)
(3,3)

3 = 0 * 3 + 3


divMod m n
  | n == 0 = (0,m)
  | otherwise = go 0 m
  where
    go q r
      | r < n     = (q, r)
      | otherwise = go (q + 1) (r - n)


fact n
  | n == 0 = 1
  | otherwise = n * fact (n - 1)

fib n
  | n <= 1 = n
  | otherwise = fib (n - 1) + fib (n - 2)



fact = \n. ?0= n 1 (* n (fact (P n)))


fact n = n * fact n

[1, 3, 4]

([], [])
([], [4])
([4], [3,4])
([3,4], [1, 3, 4])



length xs = foldr (\_ n -> n+1) 0 xs

xs = foldr (:) [] xs

xs ++ ys = foldr (:) ys xs

    [] ++ ys = ys
(x:xs) ++ ys = x : (xs ++ ys)




(\x. f (x x)) (\x. f (x x))
-> f ((\x. f (x x)) (\x. f (x x)))
-> f (f ((\x. f (x x)) (\x. f (x x))))
-> f (f (f ((\x. f (x x)) (\x. f (x x)))))


Y ::= \f . (\x. f (x x)) (\x. f (x x))

Y f = f (Y f) = f (f  (... (Y f) ...))


Factf      \f. \n. ?0= n 1 (* n (f (P n)))

fact ::= Y Factf

fact == Factf fact  ::= \n. ?0= n 1 (* n (fact (P n)))

fact ::= Y Factf ::= (\f . (\x. f (x x)) (\x. f (x x))) Factf
-> (\x. Factf (x x)) (\x. Factf (x x))
-> FactF ((\x. Factf (x x)) (\x. Factf (x x)))

Notam YFactf ::= ((\x. Factf (x x)) (\x. Factf (x x)))
YFactf -> FactF YFactf





fact 2 ->-> FactF YFactf 2
::= (\f. \n. ?0= n 1 (* n (f (P n)))) YFactf 2
->-> ?0= 2 1 (* 2 (YFactf (P 2)))
->->-> false 1 (* 2 (YFactf (P 2))) ->-> (* 2 (?0= (P 2) 1 (* (P 2) (?0= (P (P 2)) 1 (* (P (P 2)) (Yfactf (P (P (P 2)))))))))
->* (* 2 (?0= (P 2) 1 (* (P 2) (true 1 (* (P (P 2)) (Yfactf (P (P (P 2)))))))))
->-> * (* 2 (?0= (P 2) 1 (* (P 2) 1))))










